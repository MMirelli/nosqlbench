min_version: "4.17.15"

description: An example of a basic postgres bank transaction workload

scenarios:
  default:
    main: |
      run driver===cockroachdb tags===block:"main.*" threads=auto cycles=10000000
      serverName=localhost portNumber=5432 databaseName=<<database:bank>> user=postgres
      password=postgres connectionpool=hikari
      errors=SQLTransient.*:warn,count,retry;.*0800.*:warn,count,retry;stop
    rampup: |
      run driver===cockroachdb tags===block:rampup threads=auto cycles=<<accounts:1000000>>
      serverName=localhost portNumber=5432 databaseName=<<database:bank>> user=postgres
      password=postgres connectionpool=hikari filler-binding="AlphaNumericString(10)"
      errors=SQLTransient.*:warn,count,retry;.*0800.*:warn,count,retry;stop
    rampup-large: |
      run driver===cockroachdb tags===block:rampup threads=auto cycles=<<accounts:1000000>>
      serverName=localhost portNumber=5432 databaseName=<<database:bank>> user=postgres
      password=postgres connectionpool=hikari
      errors=SQLTransient.*:warn,count,retry;.*0800.*:warn,count,retry;stop
    schema: |
      run driver===cockroachdb tags===block:schema threads===1 serverName=localhost portNumber=5432
      databaseName=bank user=postgres password=postgres

bindings:
  seq_uuid: Mod(<<accounts:1000000>>L); ToHashedUUID()
  rand_uuid: Uniform(0,<<accounts:1000000>>L); ToHashedUUID()
  rand_amount: Poisson(2000000); ToInt()
  timestamp: StartingEpochMillis('2018-01-01 00:00:00'); ToDateTime()
  filler: <<filler-binding:HashedLineToStringList('data/lorem_ipsum_full.txt', 150, 150)>>; ToString()

blocks:
  schema:
    ops:
      create-table: |
          CREATE TABLE IF NOT EXISTS "<<table:account>>" (
            uuid UUID PRIMARY KEY,
            amount INTEGER,
            amount_unit VARCHAR(64),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            filler TEXT
          );
      create-indices: |
          CREATE INDEX IF NOT EXISTS amount_idx on "<<table:account>>" (amount);
          CREATE INDEX IF NOT EXISTS updated_at_idx on "<<table:account>>" (updated_at);

  rampup:
    ops:
      rampup-insert: |
          INSERT INTO "<<table:account>>" (uuid, amount, amount_unit, updated_at, created_at, filler)
          VALUES ('{seq_uuid}', {rand_amount}, 'us_cents', '{timestamp}', '{timestamp}', '{filler}')
          ON CONFLICT DO NOTHING;
  main-read:
    params:
      ratio: <<read_ratio:2>>
    ops:
      main-find: |
          SELECT * FROM "<<table:account>>" WHERE uuid = '{rand_uuid}';
  main-write:
    params:
      ratio: <<write_ratio:1>>
    ops:
      main-insert: |
          UPDATE "<<table:account>>" SET amount = {rand_amount}, updated_at = '{timestamp}' WHERE uuid = '{rand_uuid}';
