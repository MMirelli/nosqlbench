min_version: "4.17.15"

description: An example of a basic cockroach insert

scenarios:
  default:
    main: |
      run driver=cockroachdb tags==block:"main.*" threads=auto cycles===<<main-cycles:1000000>>
      serverName=localhost connectionpool=hikari
      errors=SQLTransient.*:warn,count,retry;.*0800.*:warn,count,retry;.*40001:count,retry;stop
    rampup: |
      run driver=cockroachdb tags==block:rampup threads=auto cycles===<<rampup-cycles:1000000>>
      serverName=localhost connectionpool=hikari
      errors=SQLTransient.*:warn,count,retry;.*0800.*:warn,count,retry;.*40001:count,retry;stop
    schema: |
      run driver=cockroachdb tags==block:schema threads===1 serverName=localhost

bindings:
  seq_key: Mod(<<keyCount:1000000>>L); ToInt()
  seq_value: Mod(<<valueCount:1000000000>>L); <<valueSizeDist:Hash()>>; ToString() -> String
  rw_key: <<keyDist:Uniform(0,1000000)->long>>; ToInt()
  rw_value: <<valDist:Uniform(0,1000000000)->int>>; <<valueSizeDist:Hash()>>; ToString() -> String

blocks:
  schema:
    ops:
      create-database: |
          CREATE DATABASE <<database:bank>>;
      create-table: |
          CREATE TABLE IF NOT EXISTS <<database:bank>>.<<table:banktransaction>> (
            code STRING PRIMARY KEY,
            amount INTEGER
          );
  rampup:
    ops:
      rampup-insert: |
          INSERT INTO "<<database:bank>>"."<<table:banktransaction>>"
          (code, amount) VALUES ('{seq_key}', {seq_value})
          ON CONFLICT (code) DO NOTHING;
  main-read:
    params:
      ratio: <<read_ratio:1>>
    ops:
      main-find: |
          SELECT code, amount FROM "<<database:bank>>"."<<table:banktransaction>>"
          WHERE code = '{rw_key}' AND amount = {rw_value};
  main-write:
    params:
      ratio: <<write_ratio:1>>
    ops:
      main-insert: |
          UPDATE "<<database:bank>>"."<<table:banktransaction>>" SET amount = {seq_value} WHERE code = '{seq_key}';
