min_version: "4.17.24"

description: |
  This workload is analogous to the cql-keyvalue2 workload, just implemented for MongoDB.

scenarios:
  default:
    schema: run driver=mongodb tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=mongodb tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main: run driver=mongodb tags==block:"main.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto
  astra:
    schema: run driver=mongodb tags==block:schema-astra threads==1 cycles==UNDEF
    rampup: run driver=mongodb tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main: run driver=mongodb tags==block:"main.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto

bindings:
  seq_key: Mod(TEMPLATE(keycount,1000000000)); ToString();
  seq_value: >-
    Hash();
    Mod(TEMPLATE(valuecount,1000000000));
    CharBufImage('A-Za-z0-9 _|/',16000000,HashRange(TEMPLATE(mintext,50000)TEMPLATE(addzeroes,),TEMPLATE(maxtext,150000)TEMPLATE(addzeroes,)));
    ToString();
  rw_key: TEMPLATE(keydist,Uniform(0,1000000000)); ToString() -> String
  rw_value: Hash(); TEMPLATE(valdist,Uniform(0,1000000000)); CharBufImage('A-Za-z0-9 _|/',16000000,HashRange(TEMPLATE(mintext,50000)TEMPLATE(addzeros,),TEMPLATE(maxtext,150000)TEMPLATE(addzeros,))); ToString();

blocks:
  schema:
    params:
      prepared: false
    ops:
      create-collection: |
        {
         ...
        }
#        create keyspace if not exists TEMPLATE(keyspace,baselines)
#        WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 'TEMPLATE(rf,1)'}
#        AND durable_writes = true;
  rampup:
    ops:
      rampup-insert: |
        {
        ...
        }
  main-read:
    params:
      ratio: 5
    statements:
      main-select: |
        {
        ...
        }
  main-write:
    params:
      ratio: 5
    statements:
      main-insert: |
        {
        ...
        }
